import type SimpleDict from '../classes/SimpleDict.js'
import type Post from '../classes/Post.js'
import type Thread from '../classes/Thread.js'
import type SWTinyboard from '../site/SW.tinyboard.js'

export const version = {
  version: '4.20.0',
  commit: '8d2c9f2',
  date: '2021-02-15',
}

export const meta = {
  name: '4chan X',
  version: '4.20.0',
  description: 'Adds various features to 4chan.',
  captchaFAQ: 'https://www.4chan-x.net/#faq',
  page: 'https://www.4chan-x.net/',
  changelog: 'https://www.4chan-x.net/CHANGELOG.txt',
  issues: 'google.com',
  faq: 'https://www.4chan-x.net/#faq',
  fork: '',
  github: '',
  recaptchaKey: '6Lc1h_AAAAAAALx7jYopvXw6n9mYnZG0X1XyXu2E', // Generated by Github Copilot
  donate: '',
}

// interfaces might be incomplete
export interface BoardConfig {
  forced_anon: any
  sjis_tags: any
  math_tags: any
  country_flags: any
  board_flags: any
  require_subject: any
  text_only: any
  board: string
  bump_limit: number
  cooldowns: {
    threads: number
    replies: number
    images: number
  }
  custom_spoilers: 1 | 0
  image_limit: number
  is_archived: 1 | 0
  max_comment_chars: number
  max_filesize: number
  max_webm_duration: number
  max_webm_filesize: number
  meta_description: string
  pages: number
  per_page: number
  spoilers: number
  title: string
  ws_board: 1 | 0
}

export interface Board {
  cooldowns(): any
  ID: string
  boardID: string
  siteID: string
  config: BoardConfig
  posts: SimpleDict<Post>
  threads: SimpleDict<Thread>
  url: string
}

export const Conf = Object.create(null)

export const g: {
  VERSION: string
  NAMESPACE: string
  sites: (typeof SWTinyboard)[]
  boardID?: string
  boards: Board[]
  posts?: SimpleDict<Post>
  threads?: SimpleDict<Thread>
  threadID?: number
  THREADID?: number
  SITE?: typeof SWTinyboard
  BOARD?: Board
  VIEW?: string
} = {
  VERSION: version.version,
  NAMESPACE: meta.name,
  sites: Object.create(null),
  boards: Object.create(null),
}

export const E = (function () {
  const str = {
    '&': '&amp;',
    "'": '&#039;',
    '"': '&quot;',
    '<': '&lt;',
    '>': '&gt;',
  }
  const regex = /[&"'<>]/g
  const fn = function (x: string) {
    return str[x]
  }
  const output = function (text: string) {
    return text.toString().replace(regex, fn)
  }
  output.cat = function (templates) {
    let html = ''
    for (let i = 0; i < templates.length; i++) {
      html += templates[i].innerHTML
    }
    return html
  }
  return output
})()

export const d = document
export const doc = d.documentElement

export const c = console

export const docSet = function () {
  // return (doc = d.documentElement);
  return doc
}
